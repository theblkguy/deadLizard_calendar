name: 🚀 Deploy Dead Lizard Calendar
# Manual deployment trigger - 2025-09-01 01:15:00 UTC

on:
  # Trigger deployment every 30 minutes
  schedule:
    - cron: '*/30 * * * *'
  
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'deadLizard_cal'
        type: choice
        options:
          - deadLizard_cal
          - staging
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

  # Deploy on push to deployment-branch
  push:
    branches: [ deployment-branch, main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-2'

jobs:
  check-changes:
    name: 📊 Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      commit-sha: ${{ steps.check.outputs.commit-sha }}
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check for Changes
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "🔧 Force deploy requested"
            exit 0
          fi
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "⏰ Scheduled deployment - checking for changes in last 30 minutes"
            SINCE=$(date -u -d '30 minutes ago' --iso-8601=seconds)
          else
            echo "📝 Push deployment - checking current changes"
            SINCE="1 hour ago"
          fi
          
          # Check for recent commits
          RECENT_COMMITS=$(git log --since="$SINCE" --oneline | wc -l)
          
          if [ "$RECENT_COMMITS" -gt 0 ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "✅ Found $RECENT_COMMITS recent commit(s) - deploying"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "ℹ️ No recent changes found - skipping deployment"
          fi

  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: needs.check-changes.outputs.should-deploy == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'deadLizard_cal' }}
      url: https://deadlizardjam.online

    steps:
      - name: 🔑 Setup SSH
        run: |
          echo "🔑 Setting up SSH connection..."
          mkdir -p ~/.ssh
          echo '${{ secrets.AWS_SSH_KEY }}' > ~/.ssh/aws-key.pem
          chmod 600 ~/.ssh/aws-key.pem
          ssh-keyscan ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to AWS
        run: |
          echo "🚀 Deploying application on AWS instance..."
          ssh -i ~/.ssh/aws-key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            set -e
            
            echo "🔄 Starting deployment process..."
            
            # Set up app directory
            APP_DIR="/opt/deadlizard-calendar"
            
            # Clone repo if first time, otherwise pull
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "📦 Initial clone of repository..."
              sudo rm -rf $APP_DIR  # Remove any existing non-git directory
              sudo git clone https://github.com/theblkguy/deadLizard_calendar.git $APP_DIR
              sudo chown -R ubuntu:ubuntu $APP_DIR
            else
              echo "📥 Pulling latest changes..."
              cd $APP_DIR
              sudo -u ubuntu git fetch origin
              sudo -u ubuntu git reset --hard origin/deployment-branch
            fi
            
            # Navigate to app directory for subsequent commands
            cd $APP_DIR
            
            # Create environment file
            echo "🔧 Setting up production environment..."
            sudo rm -f .env
            sudo rm -f server/.env
            echo "NODE_ENV=production" | sudo tee .env > /dev/null
            echo "PORT=5000" | sudo tee -a .env > /dev/null
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" | sudo tee -a .env > /dev/null
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" | sudo tee -a .env > /dev/null
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" | sudo tee -a .env > /dev/null
            echo "ACCESS_CODE_GUEST=${{ secrets.GUEST_ACCESS_CODE }}" | sudo tee -a .env > /dev/null
            echo "ACCESS_CODE_USER=${{ secrets.USER_ACCESS_CODE }}" | sudo tee -a .env > /dev/null
            echo "ACCESS_CODE_ADMIN=${{ secrets.ADMIN_ACCESS_CODE }}" | sudo tee -a .env > /dev/null
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" | sudo tee -a .env > /dev/null
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" | sudo tee -a .env > /dev/null
            echo "GOOGLE_CALLBACK_URL=https://deadlizardjam.online/api/auth/google/callback" | sudo tee -a .env > /dev/null
            echo "FRONTEND_URL=https://deadlizardjam.online" | sudo tee -a .env > /dev/null
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | sudo tee -a .env > /dev/null
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo tee -a .env > /dev/null
            
            # Debug environment variables (without exposing values)
            echo "🔍 Checking environment variables..."
            echo "GUEST_ACCESS_CODE length: $(echo -n "${{ secrets.GUEST_ACCESS_CODE }}" | wc -c)"
            echo "USER_ACCESS_CODE length: $(echo -n "${{ secrets.USER_ACCESS_CODE }}" | wc -c)"
            echo "ADMIN_ACCESS_CODE length: $(echo -n "${{ secrets.ADMIN_ACCESS_CODE }}" | wc -c)"
            
            # Set permissions
            sudo chmod 600 .env
            sudo chown ubuntu:ubuntu .env
            
            # Install dependencies and build
            echo "📥 Installing dependencies..."
            npm ci  # Install all dependencies including dev dependencies for build
            cd server && npm ci
            
            echo "🔨 Building application..."
            cd /opt/deadlizard-calendar
            npm run build
            cd server && npm run build
            
            echo "🧹 Cleaning up dev dependencies..."
            cd /opt/deadlizard-calendar
            npm prune --omit=dev  # Remove dev dependencies after build
            cd server && npm prune --omit=dev
            
            # Stop existing PM2 process
            echo "⏹️ Stopping existing application..."
            pm2 stop deadlizard-calendar || true
            
            # Start with PM2 using ecosystem config
            echo "▶️ Starting application with PM2..."
            cd /opt/deadlizard-calendar
            pm2 start ecosystem.config.json --env production
            pm2 save
            
            # Configure nginx
            echo "🌐 Configuring nginx..."
            sudo cp /opt/deadlizard-calendar/nginx-deadlizard.conf /etc/nginx/sites-available/deadlizard
            sudo ln -sf /etc/nginx/sites-available/deadlizard /etc/nginx/sites-enabled/deadlizard
            
            # Test nginx configuration before removing default
            if sudo nginx -t; then
              echo "✅ Nginx configuration is valid"
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo systemctl reload nginx
              echo "✅ Nginx reloaded successfully"
            else
              echo "❌ Nginx configuration test failed, keeping default site"
              sudo rm -f /etc/nginx/sites-enabled/deadlizard
              sudo systemctl reload nginx
              exit 1
            fi
            
            # Ensure nginx is running
            sudo systemctl enable nginx
            sudo systemctl start nginx
            
            # Health check
            echo "🏥 Performing health check..."
            sleep 10
            if curl -f http://localhost:5000/api/health 2>/dev/null; then
              echo "✅ Local health check successful!"
            else
              echo "❌ Local health check failed, but app may still be starting..."
            fi
            
            echo "🎵 Dead Lizard Calendar deployment completed!"
          EOF

      - name: 🏥 Post-Deployment Health Check
        run: |
          echo "🏥 Running post-deployment health checks..."
          sleep 15
          
          # Check if the application is responding
          if curl -f "https://deadlizardjam.online/api/health" 2>/dev/null; then
            echo "✅ HTTPS Application is healthy!"
          elif curl -f "http://${{ secrets.AWS_HOST }}:5000/api/health" 2>/dev/null; then
            echo "✅ HTTP Application is healthy!"
          else
            echo "❌ Application health check failed!"
            exit 1
          fi

      - name: 📢 Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful! 🎵"
            echo "🔗 Application URL: https://deadlizardjam.online"
            echo "📝 Commit: ${{ needs.check-changes.outputs.commit-sha }}"
          else
            echo "❌ Deployment failed!"
          fi
